@model _3MA.Models.RegisterViewModelForm
@{
    ViewBag.Title = "Register";
}

<h2>@ViewBag.Title.</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a new account.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @autofocus = "autofocus" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
        </div>
    </div>

        <!-- new block below -->
    <div class="form-group">
        @Html.LabelFor(m => m.GivenName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.GivenName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Surname, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Surname, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Suite, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Suite, new { @class = "form-control" })
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(m => m.Street, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Street, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.City, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Prov, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Prov, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Country, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Country, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Postal, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Postal, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Plan, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Plan, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.HPhone, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.HPhone, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.MPhone, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.MPhone, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MoveIn, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MoveIn, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MoveIn, "", new { @class = "text-danger" })
        </div>
    </div>
    

    <div class="form-group">
        @*@Html.LabelFor(m => m.RoleList, new { @class = "col-md-2 control-label" })*@
        <div class="col-md-10">
            @{ 
                foreach (var item in Model.RoleList)
                {
                    <div class="hidden">
                        <div class="hidden">

                            @if (item.Text == "Customer")
                            {
                                <input type="checkbox" name="Roles" checked="checked" value="@item.Text" />@item.Text
                            }
                            else
                            {
                                <input type="checkbox" name="Roles" checked="@item.Selected" value="@item.Text" hidden />
                            }
                        </div>

                    @*<div class="checkbox">
                        <label>
                            <input type="checkbox" name="Roles" checked="@item.Selected" value="@item.Text" />@item.Text
                        </label>
                    </div>*@
                    </div>
                }
            }
        </div>
    </div>

    <!-- Terms and conditions-->

<input type="checkbox" name="cbTerms" id="idTerms" onclick="agreeTerms()"/><p>I agree to the terms and conditions and so on</p>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnSubmit" type="submit" class="btn btn-default" value="Register" disabled/>
        </div>
    </div>
}

<script>
    function agreeTerms() {
        var terms = document.getElementById('idTerms').checked;

        if (terms) {
            document.getElementById('btnSubmit').disabled = false;
        }
        else {
            document.getElementById('btnSubmit').disabled = true;
        }
    }
</script>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
